#include <stdio.h>
#include <stdlib.h>

#define MAX 3  // Ordem máxima da árvore B

// Estrutura do nó da árvore B
typedef struct BTreeNode {
    int keys[MAX];  // Chaves no nó
    int count;      // Contador de chaves no nó
    struct BTreeNode* children[MAX + 1];  // Filhos do nó
    int isLeaf;
} BTreeNode;

// Função para criar um novo nó da B-Tree
BTreeNode* createNode(int key, int isLeaf) {
    BTreeNode* newNode = (BTreeNode*)malloc(sizeof(BTreeNode));
    newNode->keys[0] = key;
    newNode->count = 1;
    newNode->isLeaf = isLeaf;
    for (int i = 0; i <= MAX; i++)
        newNode->children[i] = NULL;
    return newNode;
}

// Função para inserir uma chave na árvore B
void insertNonFull(BTreeNode* node, int key) {
    int i = node->count - 1;
    
    if (node->isLeaf) {
        while (i >= 0 && key < node->keys[i]) {
            node->keys[i + 1] = node->keys[i];
            i--;
        }
        node->keys[i + 1] = key;
        node->count++;
    }
    else {
        while (i >= 0 && key < node->keys[i])
            i--;
        i++;
        if (node->children[i]->count == MAX) {
            splitChild(node, i);
            if (key > node->keys[i])
                i++;
        }
        insertNonFull(node->children[i], key);
    }
}

// Função de divisão do nó quando ele está cheio
void splitChild(BTreeNode* parent, int i) {
    BTreeNode* child = parent->children[i];
    BTreeNode* newChild = createNode(child->keys[MAX / 2 + 1], child->isLeaf);
    newChild->count = MAX / 2;

    for (int j = 0; j < MAX / 2; j++)
        newChild->keys[j] = child->keys[j + MAX / 2 + 1];

    if (!child->isLeaf) {
        for (int j = 0; j <= MAX / 2; j++)
            newChild->children[j] = child->children[j + MAX / 2 + 1];
    }

    child->count = MAX / 2;
    for (int j = parent->count; j >= i + 1; j--)
        parent->children[j + 1] = parent->children[j];

    parent->children[i + 1] = newChild;

    for (int j = parent->count - 1; j >= i; j--)
        parent->keys[j + 1] = parent->keys[j];

    parent->keys[i] = child->keys[MAX / 2];
    parent->count++;
}

// Função para inserir uma chave na árvore B
BTreeNode* insert(BTreeNode* root, int key) {
    if (root == NULL) {
        return createNode(key, 1);
    }
    
    if (root->count == MAX) {
        BTreeNode* newRoot = createNode(0, 0);
        newRoot->children[0] = root;
        splitChild(newRoot, 0);
        insertNonFull(newRoot, key);
        return newRoot;
    }
    
    insertNonFull(root, key);
    return root;
}

// Função para exibir a árvore B em ordem
void inorder(BTreeNode* root) {
    if (root != NULL) {
        for (int i = 0; i < root->count; i++) {
            inorder(root->children[i]);
            printf("%d ", root->keys[i]);
        }
        inorder(root->children[root->count]);
    }
}

// Função principal
int main() {
    BTreeNode* root = NULL;
    int keys[] = {10, 20, 5, 6, 12, 30, 7, 17};

    for (int i = 0; i < sizeof(keys)/sizeof(keys[0]); i++)
        root = insert(root, keys[i]);

    printf("Inorder traversal of B-Tree:\n");
    inorder(root);

    return 0;
}
